package meal_planner;

import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

public class EditGUI extends javax.swing.JDialog {

    /**
     * Creates new form EditGUI
     */
    public EditGUI(java.awt.Frame parent, boolean modal, Meal m, int arrayPosition, boolean addMeal) {
        super(parent, modal);
        this.meal = m;
        this.idx = arrayPosition;
        
        initComponents();
        
        if(addMeal == false){
            populateTable();
        }       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        MealTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        updateMealBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 280, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 232, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 200));

        MealTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Name", null},
                {"Difficulty", null},
                {"Preperation Work", null},
                {"Cooking Directions", null},
                {"Serving Directions", null},
                {"People Fed", null},
                {"Cost", null},
                {"Ingredients", null},
                {"Image1 Path", null},
                {"Image2 Path", null}
            },
            new String [] {
                "Meal Property", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        MealTable.setPreferredSize(null);
        MealTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(MealTable);
        MealTable.getColumnModel().getColumn(0).setPreferredWidth(40);
        MealTable.getColumnModel().getColumn(1).setPreferredWidth(200);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setRequestFocusEnabled(false);
        jPanel2.setLayout(new java.awt.GridLayout(0, 2));

        updateMealBtn.setText("Update Meal");
        updateMealBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateMealBtnActionPerformed(evt);
            }
        });
        jPanel2.add(updateMealBtn);

        jButton1.setText("Cancel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateMealBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMealBtnActionPerformed
        DefaultTableModel mealProperties = (DefaultTableModel)MealTable.getModel();
        MealTable.getSelectionModel().clearSelection();
        
        if(mealProperties.getValueAt(7, 1) != null){
            //Hakim code
            parseIngredients((String) mealProperties.getValueAt(7, 1));
        }
        
        meal.setName((String) mealProperties.getValueAt(0, 1));
        meal.setDifficulty((String) mealProperties.getValueAt(1, 1));
        meal.setPrepWork((String) mealProperties.getValueAt(2, 1));
        meal.setCookingDir((String) mealProperties.getValueAt(3, 1));
        meal.setServingDir((String) mealProperties.getValueAt(4, 1));
        meal.setPeopleFed((String) mealProperties.getValueAt(5, 1));
        meal.setCost(Double.parseDouble(mealProperties.getValueAt(6, 1).toString()));
        meal.setIngredient(ingredients);
        meal.setImage1Path((String) mealProperties.getValueAt(8, 1));
        meal.setImage2Path((String) mealProperties.getValueAt(9, 1));
        
        this.update = true;
        EditGUI.this.setVisible(false);
    }//GEN-LAST:event_updateMealBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        EditGUI.this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    public void populateTable(){
        DefaultTableModel mealProperties = (DefaultTableModel)MealTable.getModel();
        
        concatIngredients();
        
        mealProperties.setValueAt(meal.getName(), 0, 1);
        mealProperties.setValueAt(meal.getDifficulty(), 1, 1);
        mealProperties.setValueAt(meal.getPrepWork(), 2, 1);
        mealProperties.setValueAt(meal.getCookingDir(), 3, 1);
        mealProperties.setValueAt(meal.getServingDir(), 4, 1);
        mealProperties.setValueAt(meal.getPeopleFed(), 5, 1);
        mealProperties.setValueAt(String.format("%.2f", meal.getCost()), 6, 1);
        mealProperties.setValueAt(this.ingredientString, 7, 1);
        mealProperties.setValueAt(meal.getImage1Path(), 8, 1);
        mealProperties.setValueAt(meal.getImage2Path(), 9, 1);
    }
    
    private void concatIngredients(){
        StringBuilder sb = new StringBuilder();
        int count = 1;
        
        if(meal.getIngredients() != null){
            for(String ig : meal.getIngredients()){
                if(count == meal.getIngredients().size()){
                    sb.append(ig);
                }
                else{
                    sb.append(ig).append(",");
                }
                count++;
            }
            this.ingredientString = sb.toString();
        }
    }
    
    private void parseIngredients(String line){
        String[] temp = line.split(",");
        
        for(String s : temp){
            this.ingredients.add(s);
        }
    }
    
    public Meal getEditedMeal(){
        return this.meal;
    }
    public int getArrayPosition(){
        return this.idx;
    }
    public boolean getUpdate(){
        return this.update;
    }
    public ArrayList getIngredientArray(){
        return this.ingredients;
    }
    
    private String ingredientString;
    private ArrayList<String> ingredients = new ArrayList<>();
    private boolean update = false;
    private final int idx;
    private Meal meal;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable MealTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton updateMealBtn;
    // End of variables declaration//GEN-END:variables
}
