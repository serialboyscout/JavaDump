package meal_planner;

import java.awt.Desktop;
import java.awt.Image;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.Set;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

public class Streamlined_Meals extends java.awt.Frame{  

	/**
     * Creates new form Streamlined_Meals
     */
    public Streamlined_Meals() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainInternalFrame = new javax.swing.JInternalFrame();
        MealsPanel = new javax.swing.JPanel();
        MealsTableScrollPane = new javax.swing.JScrollPane();
        MealsTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        AddMealPlanBtn = new javax.swing.JButton();
        Specifics = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        IngredientsPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        IngredientTextArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        Image1jLabel = new javax.swing.JLabel();
        Image2jLabel = new javax.swing.JLabel();
        PrepWorkPanel = new javax.swing.JPanel();
        PrepWorkScrollPane = new javax.swing.JScrollPane();
        PrepWorkTextArea = new javax.swing.JTextArea();
        CookingPanel = new javax.swing.JPanel();
        CookingScrollPane = new javax.swing.JScrollPane();
        CookingTextArea = new javax.swing.JTextArea();
        ServingPanel = new javax.swing.JPanel();
        ServingScrollPane = new javax.swing.JScrollPane();
        ServingTextArea = new javax.swing.JTextArea();
        ShoppingList = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ShoppingListTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        AddToListBtn = new javax.swing.JButton();
        RemoveFromListBtn = new javax.swing.JButton();
        SaveListBtn = new javax.swing.JButton();
        MealPlanPanel = new javax.swing.JPanel();
        MealPlanScrollPane = new javax.swing.JScrollPane();
        MealPlanTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        RemoveMealBtn = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        LoadMealsMenuItem = new javax.swing.JMenuItem();
        SaveMealsMenuItem = new javax.swing.JMenuItem();
        EditMealsMenuItem = new javax.swing.JMenuItem();
        AddMealMenuItem = new javax.swing.JMenuItem();
        DeleteMealMenuItem = new javax.swing.JMenuItem();
        LoadMealPlanMenuItem = new javax.swing.JMenuItem();
        SaveMealPlanMenuItem = new javax.swing.JMenuItem();
        PreferencesMenu = new javax.swing.JMenu();
        CurrencyMenuItem = new javax.swing.JMenuItem();
        SetImageDirMenuItem = new javax.swing.JMenuItem();
        LinksMenu = new javax.swing.JMenu();
        RecipesMenuItem = new javax.swing.JMenuItem();
        RecipesIngredientMenuItem = new javax.swing.JMenuItem();
        AboutMenu = new javax.swing.JMenu();

        setPreferredSize(new java.awt.Dimension(1500, 575));
        setSize(new java.awt.Dimension(0, 0));
        setTitle("Streamlined Meals");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        MainInternalFrame.setToolTipText("");
        MainInternalFrame.setVisible(true);
        ((javax.swing.plaf.basic.BasicInternalFrameUI)MainInternalFrame.getUI()).setNorthPane(null);
        MainInternalFrame.getContentPane().setLayout(new java.awt.GridLayout(0, 3, 10, 0));

        MealsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Meals", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N
        MealsPanel.setMinimumSize(new java.awt.Dimension(200, 58));
        MealsPanel.setPreferredSize(new java.awt.Dimension(200, 100));
        MealsPanel.setLayout(new java.awt.BorderLayout());

        MealsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Serves", "Difficulty", "Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        MealsTable.setAutoscrolls(false);
        MealsTable.setMaximumSize(new java.awt.Dimension(2147483647, 1000000));
        MealsTable.setMinimumSize(new java.awt.Dimension(45, 68));
        MealsTable.setName(""); // NOI18N
        MealsTable.getTableHeader().setReorderingAllowed(false);
        MealsTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                MealsTableFocusGained(evt);
            }
        });
        MealsTableScrollPane.setViewportView(MealsTable);
        MealsTable.getAccessibleContext().setAccessibleDescription("");
        MealsTable.getAccessibleContext().setAccessibleParent(MealsPanel);

        MealsPanel.add(MealsTableScrollPane, java.awt.BorderLayout.CENTER);

        jPanel3.setPreferredSize(new java.awt.Dimension(347, 30));

        AddMealPlanBtn.setText("Add to Meal Plan");
        AddMealPlanBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddMealPlanBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 418, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(0, 152, Short.MAX_VALUE)
                    .addComponent(AddMealPlanBtn)
                    .addGap(0, 153, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(AddMealPlanBtn)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        MealsPanel.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        MainInternalFrame.getContentPane().add(MealsPanel);
        MealsPanel.getAccessibleContext().setAccessibleName("");

        Specifics.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Specifics", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N
        Specifics.setLayout(new java.awt.BorderLayout());

        jTabbedPane1.setName(""); // NOI18N

        IngredientsPanel.setLayout(new java.awt.GridLayout(0, 2, 10, 0));

        jScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        IngredientTextArea.setEditable(false);
        IngredientTextArea.setColumns(20);
        IngredientTextArea.setLineWrap(true);
        IngredientTextArea.setRows(5);
        IngredientTextArea.setWrapStyleWord(true);
        IngredientTextArea.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jScrollPane5.setViewportView(IngredientTextArea);

        IngredientsPanel.add(jScrollPane5);

        jPanel2.setLayout(new java.awt.GridLayout(2, 0, 10, 10));

        Image1jLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Image1jLabel.setText("No Image");
        Image1jLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.add(Image1jLabel);

        Image2jLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Image2jLabel.setText("No Image");
        Image2jLabel.setToolTipText("");
        Image2jLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.add(Image2jLabel);

        IngredientsPanel.add(jPanel2);

        jTabbedPane1.addTab("Ingredients", IngredientsPanel);

        PrepWorkPanel.setLayout(new java.awt.BorderLayout());

        PrepWorkTextArea.setColumns(20);
        PrepWorkTextArea.setLineWrap(true);
        PrepWorkTextArea.setRows(5);
        PrepWorkTextArea.setWrapStyleWord(true);
        PrepWorkScrollPane.setViewportView(PrepWorkTextArea);

        PrepWorkPanel.add(PrepWorkScrollPane, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Prep Work", PrepWorkPanel);

        CookingPanel.setLayout(new java.awt.BorderLayout());

        CookingTextArea.setColumns(20);
        CookingTextArea.setLineWrap(true);
        CookingTextArea.setRows(5);
        CookingTextArea.setWrapStyleWord(true);
        CookingScrollPane.setViewportView(CookingTextArea);

        CookingPanel.add(CookingScrollPane, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Cooking", CookingPanel);

        ServingPanel.setLayout(new java.awt.BorderLayout());

        ServingTextArea.setColumns(20);
        ServingTextArea.setLineWrap(true);
        ServingTextArea.setRows(5);
        ServingTextArea.setWrapStyleWord(true);
        ServingScrollPane.setViewportView(ServingTextArea);

        ServingPanel.add(ServingScrollPane, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Serving", ServingPanel);

        ShoppingList.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        ShoppingListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Quantity", "Notes"
            }
        ));
        ShoppingListTable.setPreferredSize(null);
        jScrollPane2.setViewportView(ShoppingListTable);

        ShoppingList.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel1.setPreferredSize(new java.awt.Dimension(440, 20));
        jPanel1.setLayout(new java.awt.GridLayout(0, 3, 15, 0));

        AddToListBtn.setText("Add to List");
        AddToListBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddToListBtnActionPerformed(evt);
            }
        });
        jPanel1.add(AddToListBtn);

        RemoveFromListBtn.setText("Remove from List");
        RemoveFromListBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveFromListBtnActionPerformed(evt);
            }
        });
        jPanel1.add(RemoveFromListBtn);

        SaveListBtn.setText("Save List");
        SaveListBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveListBtnActionPerformed(evt);
            }
        });
        jPanel1.add(SaveListBtn);

        ShoppingList.add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jTabbedPane1.addTab("Shopping List", ShoppingList);

        Specifics.add(jTabbedPane1, java.awt.BorderLayout.CENTER);
        jTabbedPane1.getAccessibleContext().setAccessibleDescription("");

        MainInternalFrame.getContentPane().add(Specifics);

        MealPlanPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Meal Plan", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N
        MealPlanPanel.setLayout(new java.awt.BorderLayout());

        MealPlanTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Serves", "Difficulty", "Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        MealPlanTable.getTableHeader().setReorderingAllowed(false);
        MealPlanTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                MealPlanTableFocusGained(evt);
            }
        });
        MealPlanScrollPane.setViewportView(MealPlanTable);

        MealPlanPanel.add(MealPlanScrollPane, java.awt.BorderLayout.CENTER);

        jPanel4.setPreferredSize(new java.awt.Dimension(347, 30));

        RemoveMealBtn.setText("Remove Meal");
        RemoveMealBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveMealBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 418, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 160, Short.MAX_VALUE)
                    .addComponent(RemoveMealBtn)
                    .addGap(0, 161, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(RemoveMealBtn)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        MealPlanPanel.add(jPanel4, java.awt.BorderLayout.PAGE_END);

        MainInternalFrame.getContentPane().add(MealPlanPanel);

        jMenuBar1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        FileMenu.setText("File");

        LoadMealsMenuItem.setText("Load Meals");
        LoadMealsMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                LoadMealsMenuItemMouseReleased(evt);
            }
        });
        FileMenu.add(LoadMealsMenuItem);

        SaveMealsMenuItem.setText("Save Meals");
        SaveMealsMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                SaveMealsMenuItemMouseReleased(evt);
            }
        });
        FileMenu.add(SaveMealsMenuItem);

        EditMealsMenuItem.setText("Edit Meal");
        EditMealsMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                EditMealsMenuItemMouseReleased(evt);
            }
        });
        FileMenu.add(EditMealsMenuItem);

        AddMealMenuItem.setText("Add Meal");
        AddMealMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddMealMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(AddMealMenuItem);

        DeleteMealMenuItem.setText("Delete Meal");
        DeleteMealMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                DeleteMealMenuItemMouseReleased(evt);
            }
        });
        FileMenu.add(DeleteMealMenuItem);

        LoadMealPlanMenuItem.setText("Load Meal Plan");
        LoadMealPlanMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                LoadMealPlanMenuItemMouseReleased(evt);
            }
        });
        FileMenu.add(LoadMealPlanMenuItem);

        SaveMealPlanMenuItem.setText("Save Meal Plan");
        SaveMealPlanMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                SaveMealPlanMenuItemMouseReleased(evt);
            }
        });
        FileMenu.add(SaveMealPlanMenuItem);

        jMenuBar1.add(FileMenu);

        PreferencesMenu.setText("Preferences");

        CurrencyMenuItem.setText("Currency");
        CurrencyMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                CurrencyMenuItemMouseReleased(evt);
            }
        });
        PreferencesMenu.add(CurrencyMenuItem);

        SetImageDirMenuItem.setText("Set Image Directory");
        SetImageDirMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                SetImageDirMenuItemMouseReleased(evt);
            }
        });
        PreferencesMenu.add(SetImageDirMenuItem);

        jMenuBar1.add(PreferencesMenu);

        LinksMenu.setText("Links");

        RecipesMenuItem.setText("Recipes");
        RecipesMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                RecipesMenuItemMouseReleased(evt);
            }
        });
        LinksMenu.add(RecipesMenuItem);

        RecipesIngredientMenuItem.setText("Recipes by Ingredient");
        RecipesIngredientMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                RecipesIngredientMenuItemMouseReleased(evt);
            }
        });
        LinksMenu.add(RecipesIngredientMenuItem);

        jMenuBar1.add(LinksMenu);

        AboutMenu.setText("About");
        AboutMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AboutMenuMouseClicked(evt);
            }
        });
        jMenuBar1.add(AboutMenu);

        MainInternalFrame.setJMenuBar(jMenuBar1);
        jMenuBar1.getAccessibleContext().setAccessibleParent(this);

        add(MainInternalFrame, java.awt.BorderLayout.CENTER);

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void AboutMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AboutMenuMouseClicked
        String aboutString = "This prgram was created as a class assignment in\n" +
                             "CSIS-1410 Object Oriented Programming.\n" +
                             "\nDevelopers:\n" +
                             "Hakim Baraki\n" +
                             "Benny Garcia\n" +
                             "Daniel Lee\n" +
                             "Dane Burden\n";
        
        JOptionPane.showMessageDialog(null, aboutString, "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_AboutMenuMouseClicked

    private void RecipesMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RecipesMenuItemMouseReleased
        if (evt.getClickCount() > 0) {
          if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                try {
                    URI uri = new URI("http://food.ndtv.com/recipes");
                    desktop.browse(uri);
                } catch (IOException | URISyntaxException ex) {
                    ex.printStackTrace();
                }
            }
        } 
    }//GEN-LAST:event_RecipesMenuItemMouseReleased

    private void RecipesIngredientMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RecipesIngredientMenuItemMouseReleased
        if (evt.getClickCount() > 0) {
          if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                try {
                    URI uri = new URI("http://food.ndtv.com/ingredient");
                    desktop.browse(uri);
                } catch (IOException | URISyntaxException ex) {
                    ex.printStackTrace();
                }
            }
        }         
    }//GEN-LAST:event_RecipesIngredientMenuItemMouseReleased

    private void LoadMealsMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LoadMealsMenuItemMouseReleased
        DefaultTableModel mealsModel = (DefaultTableModel) MealsTable.getModel();
        mealsModel.setNumRows(0);
        mealList.clear();
        
        SerializeData deser = new SerializeData();
        mealList = deser.deserializeData();
        
        if(mealList != null){
            for(Meal m : mealList){           
                String cost = Double.toString(m.getCost());
                cost = new StringBuilder(cost).insert(0, currentCurrency).toString();

                Object[] row = {m.getName(), m.getPeopleFed(), m.getDifficulty(), cost};
                mealsModel.addRow(row);
            }

        mealsModel.fireTableRowsInserted(0, mealList.size());
        MealsTable.revalidate();
        }
    }
//GEN-LAST:event_LoadMealsMenuItemMouseReleased

    private void AddMealPlanBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddMealPlanBtnActionPerformed
    	DefaultTableModel mealsModel = (DefaultTableModel) MealsTable.getModel();
        DefaultTableModel planModel = (DefaultTableModel) MealPlanTable.getModel();
        ArrayList row = new ArrayList();
        
        int rowIdx = MealsTable.convertRowIndexToModel(MealsTable.getSelectedRow());          
        
        if(rowIdx != -1){
            planList.add(mealList.get(rowIdx));
            
            for(int i=0; i<MealsTable.getColumnCount(); i++){
               row.add(mealsModel.getValueAt(rowIdx, i));
            }
            planModel.addRow(row.toArray());
            updateShoppingList();
            
        }
    }//GEN-LAST:event_AddMealPlanBtnActionPerformed

    private void RemoveMealBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveMealBtnActionPerformed
    	DefaultTableModel planModel = (DefaultTableModel) MealPlanTable.getModel();

        int rowIdx = MealPlanTable.convertRowIndexToModel(MealPlanTable.getSelectedRow());
        
        if(rowIdx != -1){
            planModel.removeRow(rowIdx);
            planList.remove(rowIdx);
        }
        
        updateShoppingList();
        
        MealPlanTable.revalidate();
    }//GEN-LAST:event_RemoveMealBtnActionPerformed

    private void MealsTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_MealsTableFocusGained
    	MealPlanTable.getSelectionModel().clearSelection();
        mealTableLastFocus = true;        
        
        MealsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                int rowIdx = MealsTable.convertRowIndexToModel(MealsTable.getSelectedRow());

                if(rowIdx != -1){
                    populateFields(rowIdx, true);
                }
            }
        });
    }//GEN-LAST:event_MealsTableFocusGained

    private void MealPlanTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_MealPlanTableFocusGained
    	MealsTable.getSelectionModel().clearSelection();
        mealTableLastFocus = false;
        
        MealPlanTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                int rowIdx = MealPlanTable.convertRowIndexToModel(MealPlanTable.getSelectedRow());
        
                if(rowIdx != -1){
                    populateFields(rowIdx, false);
                }
            }
        });
    }//GEN-LAST:event_MealPlanTableFocusGained

    private void CurrencyMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CurrencyMenuItemMouseReleased
    	char usd = 0x0024;
        char bsp = 0x00A3;
        char yen = 0x00A5;
        char afg = 0x060B;

        String[] currencyOptions = {Character.toString(usd), Character.toString(bsp), Character.toString(afg), 
                                    Character.toString(yen)};

        int returnValue = JOptionPane.showOptionDialog(null, "Please selecte a currency:", "Currency Selection",
        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, currencyOptions, currencyOptions[0]);
        
        if(returnValue != JOptionPane.CLOSED_OPTION && currentCurrency != currencyOptions[returnValue].charAt(0)){
            fromCurrency = currentCurrency;
            toCurrency = currencyOptions[returnValue].charAt(0);
            currentCurrency = toCurrency;
            
            double convFactor = 1.0;
            
            //convert current currency to USD
            if(fromCurrency == bsp){
                convFactor = 1.50978;
            }
            else if(fromCurrency == yen){
                convFactor = 0.00811020;
            }
            else if(fromCurrency == afg){
                convFactor = 0.0150060;
            }           
            
            //convert current conversion factor to desired one
            if(toCurrency == bsp){
                convFactor = convFactor*0.662315;
            }
            else if(toCurrency == yen){
                convFactor = convFactor*123.296;
            }
            else if(toCurrency == afg){
                convFactor = convFactor*66.6382;
            }
            
            //convert meals in meal table
            for(int i=0; i<MealsTable.getRowCount(); i++){
                String cellValue = MealsTable.getValueAt(i, 3).toString();
                cellValue = new StringBuilder(cellValue).delete(0,1).toString();
                
                Double tempCost = Double.parseDouble(cellValue) ;                
                tempCost = tempCost*convFactor; 
                
                String cost = String.format("%.2f", tempCost);
                cost = new StringBuilder(cost).insert(0, toCurrency).toString();
                
                MealsTable.setValueAt(cost, i, 3);
                mealList.get(i).setCost(tempCost);
            }
            
            //convert meals in meal plan table
            for(int i=0; i<MealPlanTable.getRowCount(); i++){
                String cellValue = MealPlanTable.getValueAt(i, 3).toString();
                cellValue = new StringBuilder(cellValue).delete(0,1).toString();
                
                Double tempCost = Double.parseDouble(cellValue) ;
                tempCost = tempCost*convFactor;
                
                String cost = String.format("%.2f", tempCost);
                cost = new StringBuilder(cost).insert(0, toCurrency).toString();
                
                MealPlanTable.setValueAt(cost, i, 3);
                planList.get(i).setCost(tempCost);
            }
        }
    }//GEN-LAST:event_CurrencyMenuItemMouseReleased

    private void SaveMealsMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SaveMealsMenuItemMouseReleased
        SerializeData saveMeals = new SerializeData();
        saveMeals.serializeData(mealList);
    }//GEN-LAST:event_SaveMealsMenuItemMouseReleased

    private void LoadMealPlanMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LoadMealPlanMenuItemMouseReleased
        DefaultTableModel planModel = (DefaultTableModel) MealPlanTable.getModel();
        planModel.setNumRows(0);
        planList.clear();
        
        SerializeData deser = new SerializeData();
        planList = deser.deserializeData();
        
        if(planList != null){       
            for(Meal m : planList){
                String cost = Double.toString(m.getCost());
                cost = new StringBuilder(cost).insert(0, currentCurrency).toString();

                Object[] row = {m.getName(), m.getPeopleFed(), m.getDifficulty(), cost};
                planModel.addRow(row);
            }
        
            updateShoppingList();
            planModel.fireTableRowsInserted(0, planList.size());
            MealPlanTable.revalidate();
        }
    }//GEN-LAST:event_LoadMealPlanMenuItemMouseReleased

    private void SaveMealPlanMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SaveMealPlanMenuItemMouseReleased
        SerializeData saveMealPlan = new SerializeData();
        saveMealPlan.serializeData(planList);
    }//GEN-LAST:event_SaveMealPlanMenuItemMouseReleased

    private void DeleteMealMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteMealMenuItemMouseReleased
        DefaultTableModel mealModel = (DefaultTableModel) MealsTable.getModel();
        
        int rowIdx = MealsTable.convertRowIndexToModel(MealsTable.getSelectedRow());
        
        if(rowIdx != -1){
                mealModel.removeRow(rowIdx);
                mealList.remove(rowIdx);
        }
        MealsTable.revalidate();
    }//GEN-LAST:event_DeleteMealMenuItemMouseReleased

    private void EditMealsMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EditMealsMenuItemMouseReleased
        if(mealTableLastFocus){
            int rowIdx = MealsTable.convertRowIndexToModel(MealsTable.getSelectedRow());

            EditGUI editMealGUI = null;
            if(rowIdx != -1){        
                editMealGUI = new EditGUI(null, true, mealList.get(rowIdx), rowIdx, false);
                editMealGUI.setVisible(true);
                
                if(editMealGUI.getUpdate() == true){
                   updateMeal(editMealGUI.getEditedMeal(), editMealGUI.getArrayPosition(), false); 
                }
                editMealGUI.dispose();
            }
        }
    }//GEN-LAST:event_EditMealsMenuItemMouseReleased

    private void AddMealMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddMealMenuItemActionPerformed
        int idx = MealsTable.convertRowIndexToModel(MealsTable.getRowCount());
        
        Meal newMeal = new Meal(null, null, null, null, null, null, 0.0, null, null, null);
        
        EditGUI editMealGUI = new EditGUI(null, true, newMeal, idx, false);
        editMealGUI.setVisible(true);
        
        if(editMealGUI.getUpdate() == true){
           updateMeal(editMealGUI.getEditedMeal(), editMealGUI.getArrayPosition(), true); 
        }
        editMealGUI.dispose();
    }//GEN-LAST:event_AddMealMenuItemActionPerformed

    private void AddToListBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddToListBtnActionPerformed
        DefaultTableModel shoppingModel = (DefaultTableModel) ShoppingListTable.getModel();
        
        shoppingModel.addRow(new Object[]{null, null, null});
    }//GEN-LAST:event_AddToListBtnActionPerformed

    private void RemoveFromListBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveFromListBtnActionPerformed
        DefaultTableModel shoppingModel = (DefaultTableModel) ShoppingListTable.getModel();
        int rowIdx = ShoppingListTable.getSelectedRow();
        
        shoppingModel.removeRow(rowIdx);
    }//GEN-LAST:event_RemoveFromListBtnActionPerformed

    private void SaveListBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveListBtnActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        fileChooser.setFileFilter(filter);
        fileChooser.setCurrentDirectory(new File("."));
        
        int result = fileChooser.showSaveDialog(fileChooser);

        if (result == JFileChooser.APPROVE_OPTION){
            File selectedFile = fileChooser.getSelectedFile();
            String filePath =  selectedFile.getAbsolutePath();
            
            if(!filePath.toLowerCase().endsWith(".txt")){
                filePath = filePath + ".txt";
            }
            
            try(FileWriter data = new FileWriter(filePath, false)){
                for(int i=0; i<ShoppingListTable.getRowCount(); i++){
                    StringBuilder sb = new StringBuilder();
                    
                    for(int j=0; j<ShoppingListTable.getColumnCount(); j++){
                        if(j != ShoppingListTable.getColumnCount()-1){
                            sb.append((String) ShoppingListTable.getValueAt(i, j)).append(", ");
                        }
                        else if(j == ShoppingListTable.getColumnCount()-1){
                            sb.append((String) ShoppingListTable.getValueAt(i, j)).append("\n");
                        }
                    }
                    data.write(sb.toString().replaceAll(",\\s\\bnull\\b", ""));
                }
            } catch (IOException ex) {
                System.out.print(ex);
            }
        }
    }//GEN-LAST:event_SaveListBtnActionPerformed

    private void SetImageDirMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SetImageDirMenuItemMouseReleased
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("."));
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        
        int result = fileChooser.showOpenDialog(fileChooser);

        if (result == JFileChooser.APPROVE_OPTION){
            imageDirectory = fileChooser.getSelectedFile().toString();
        }
        
        for(Meal m : mealList){
            Path image1Name = Paths.get(m.getImage1Path()).getFileName();
            Path image2Name = Paths.get(m.getImage2Path()).getFileName();
            
            String new1Path = imageDirectory + "\\" + image1Name;
            String new2Path = imageDirectory + "\\" + image2Name;
            
            m.setImage1Path(new1Path);
            m.setImage2Path(new2Path);
        }
        
        for(Meal m : planList){
            Path image1Name = Paths.get(m.getImage1Path()).getFileName();
            Path image2Name = Paths.get(m.getImage2Path()).getFileName();
            
            String new1Path = imageDirectory + "\\" + image1Name;
            String new2Path = imageDirectory + "\\" + image2Name;
            
            m.setImage1Path(new1Path);
            m.setImage2Path(new2Path);
        }
    }//GEN-LAST:event_SetImageDirMenuItemMouseReleased
    
    private void updateMeal(Meal m, int idx, boolean add){
        DefaultTableModel mealModel = (DefaultTableModel) MealsTable.getModel();
        DefaultTableModel planModel = (DefaultTableModel) MealPlanTable.getModel();
        
        String cost = Double.toString(m.getCost());
        cost = new StringBuilder(cost).insert(0, currentCurrency).toString();
        Object[] row = {m.getName(), m.getPeopleFed(), m.getDifficulty(), cost};
        
        if(add == false){
            mealList.set(idx, m);
            mealModel.removeRow(idx);
            mealModel.insertRow(idx, row);
            
            int count = 0;
            for(Meal pm : planList){
                if(pm.getName() == m.getName()){
                    planList.set(count, m);
                    planModel.removeRow(count);
                    planModel.insertRow(count, row);                  
                }
            count++;
            }
        }
        else if(add == true){
            mealList.add(m);
            mealModel.addRow(row);
        }
        
        planModel.fireTableDataChanged();
        mealModel.fireTableDataChanged();
        MealsTable.revalidate();
        MealPlanTable.revalidate();
    }
        
    private void populateFields(int rowIdx, boolean mealTableFocus){
        Meal meal = null;

        if(mealTableFocus == true){
            meal = mealList.get(rowIdx);
        }
        else{
            meal = planList.get(rowIdx);
        }
        
        ArrayList<String> ingredients = meal.getIngredients();
        StringBuilder sb = new StringBuilder();
        String ingredientString = "";
        
        if(ingredients != null){
            for(String ig : ingredients){
                ig = ig.trim();
                sb.append("\u2022  ").append(ig).append("\n");
            }
            ingredientString = sb.toString();
        }
        
        Image1jLabel.setIcon(null);
        Image2jLabel.setIcon(null);
        Image1jLabel.setText("No Image");
        Image2jLabel.setText("No Image");
        
        if(meal.getImage1Path() != null){           
            Path fp = Paths.get(meal.getImage1Path());

            if(Files.exists(fp)){
                Image1jLabel.setText(null);
                //Hakim code
                Image1jLabel.setIcon((ImageIcon) imageResize(new ImageIcon(meal.getImage1Path())));
            }
        }
        
        if(meal.getImage2Path() != null){
            Path fp = Paths.get(meal.getImage2Path());
            
            if(Files.exists(fp)){
                Image2jLabel.setText(null);
                //Hakim code
                Image2jLabel.setIcon((ImageIcon) imageResize(new ImageIcon(meal.getImage2Path())));
            }
        }
        
        IngredientTextArea.setText(ingredientString);
        PrepWorkTextArea.setText(meal.getPrepWork());
        CookingTextArea.setText(meal.getCookingDir());
        ServingTextArea.setText(meal.getServingDir());
    }
    
    //Hakim code
    private Icon imageResize(Icon image) {
            Image img = ((ImageIcon) image).getImage();
            Image newimg = img.getScaledInstance(Image1jLabel.getWidth(), Image1jLabel.getHeight(), java.awt.Image.SCALE_SMOOTH);
            image = new ImageIcon(newimg);
            return image;
    }
    
    private void updateShoppingList(){
        DefaultTableModel shoppingModel = (DefaultTableModel) ShoppingListTable.getModel();
        
        ingredientList.clear();
        
        for(Meal m : planList){
            for(String s : m.getIngredients()){
                s = s.trim();
                ingredientList.add(s);
            }
        }
        shoppingModel.setRowCount(ingredientList.size());
        
        int count = 0;
        for(String s : ingredientList){
            shoppingModel.setValueAt(s, count, 0);
            count ++;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Streamlined_Meals().setVisible(true);
            }
        });
    }
    
    private String imageDirectory = null;
    private boolean mealTableLastFocus = false;
    private boolean convertCurrency = true;
    private char fromCurrency;
    private char toCurrency;
    private char currentCurrency = 0x0024;
    private Set<String> ingredientList = new LinkedHashSet<String>();
    private ArrayList<Meal> planList = new ArrayList<>();
    private ArrayList<Meal> mealList = new ArrayList<>();    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu AboutMenu;
    private javax.swing.JMenuItem AddMealMenuItem;
    private javax.swing.JButton AddMealPlanBtn;
    private javax.swing.JButton AddToListBtn;
    private javax.swing.JPanel CookingPanel;
    private javax.swing.JScrollPane CookingScrollPane;
    private javax.swing.JTextArea CookingTextArea;
    private javax.swing.JMenuItem CurrencyMenuItem;
    private javax.swing.JMenuItem DeleteMealMenuItem;
    private javax.swing.JMenuItem EditMealsMenuItem;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JLabel Image1jLabel;
    private javax.swing.JLabel Image2jLabel;
    private javax.swing.JTextArea IngredientTextArea;
    private javax.swing.JPanel IngredientsPanel;
    private javax.swing.JMenu LinksMenu;
    private javax.swing.JMenuItem LoadMealPlanMenuItem;
    private javax.swing.JMenuItem LoadMealsMenuItem;
    private javax.swing.JInternalFrame MainInternalFrame;
    private javax.swing.JPanel MealPlanPanel;
    private javax.swing.JScrollPane MealPlanScrollPane;
    private javax.swing.JTable MealPlanTable;
    private javax.swing.JPanel MealsPanel;
    private javax.swing.JTable MealsTable;
    private javax.swing.JScrollPane MealsTableScrollPane;
    private javax.swing.JMenu PreferencesMenu;
    private javax.swing.JPanel PrepWorkPanel;
    private javax.swing.JScrollPane PrepWorkScrollPane;
    private javax.swing.JTextArea PrepWorkTextArea;
    private javax.swing.JMenuItem RecipesIngredientMenuItem;
    private javax.swing.JMenuItem RecipesMenuItem;
    private javax.swing.JButton RemoveFromListBtn;
    private javax.swing.JButton RemoveMealBtn;
    private javax.swing.JButton SaveListBtn;
    private javax.swing.JMenuItem SaveMealPlanMenuItem;
    private javax.swing.JMenuItem SaveMealsMenuItem;
    private javax.swing.JPanel ServingPanel;
    private javax.swing.JScrollPane ServingScrollPane;
    private javax.swing.JTextArea ServingTextArea;
    private javax.swing.JMenuItem SetImageDirMenuItem;
    private javax.swing.JPanel ShoppingList;
    private javax.swing.JTable ShoppingListTable;
    private javax.swing.JPanel Specifics;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}